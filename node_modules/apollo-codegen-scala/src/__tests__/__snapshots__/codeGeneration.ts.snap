// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a mutation with variables 1`] = `
"object CreateReviewMutation extends com.apollographql.scalajs.GraphQLMutation {
  val operationString =
    \\"mutation CreateReview($episode: Episode) {\\" +
    \\"  createReview(episode: $episode, review: {stars: 5, commentary: \\\\\\"Wow!\\\\\\"}) {\\" +
    \\"    stars\\" +
    \\"    commentary\\" +
    \\"  }\\" +
    \\"}\\"
  val operation = com.apollographql.scalajs.gql(operationString)


  @scala.scalajs.js.native trait Variables extends scala.scalajs.js.Object {
    val episode: com.apollographql.scalajs.OptionalInput[String]
  }

  object Variables {
    def apply(episode: com.apollographql.scalajs.OptionalInput[String] = com.apollographql.scalajs.OptionalInput.empty) =  {
      scala.scalajs.js.Dynamic.literal(episode = episode).asInstanceOf[Variables]
    }
  }

  @scala.scalajs.js.native trait Data extends scala.scalajs.js.Object {
    val createReview: com.apollographql.scalajs.OptionalResult[Data.CreateReview]
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Mutation\\")
    implicit class ViewExtensions(private val orig: Data) extends AnyVal {
    }

    @scala.scalajs.js.native trait CreateReview extends scala.scalajs.js.Object {
      val stars: Int
      val commentary: com.apollographql.scalajs.OptionalResult[String]
    }

    object CreateReview {
      val possibleTypes = scala.collection.Set(\\"Review\\")
      implicit class ViewExtensions(private val orig: CreateReview) extends AnyVal {
      }
    }
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with a fragment spread containing deep fields 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...HeroDetails\\" +
    \\"  }\\" +
    \\"}\\"

  val requestString: String = { operationString + HeroDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  @scala.scalajs.js.native trait Data extends scala.scalajs.js.Object {
    val hero: com.apollographql.scalajs.OptionalResult[Data.Hero]
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
    implicit class ViewExtensions(private val orig: Data) extends AnyVal {
    }

    @scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object with HeroDetails {
      val name: String
      val friends: com.apollographql.scalajs.OptionalResult[scala.scalajs.js.Array[com.apollographql.scalajs.OptionalResult[Hero.Friend]]]
    }

    object Hero {
      val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
      implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
      }

      @scala.scalajs.js.native trait Friend extends scala.scalajs.js.Object with HeroDetails.Friend {
        val name: String
      }

      object Friend {
        val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
        implicit class ViewExtensions(private val orig: Friend) extends AnyVal {
        }
      }
    }
  }
}

@scala.scalajs.js.native trait HeroDetails extends scala.scalajs.js.Object {
  val name: String
  val friends: com.apollographql.scalajs.OptionalResult[scala.scalajs.js.Array[com.apollographql.scalajs.OptionalResult[HeroDetails.Friend]]]
}

object HeroDetails {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: HeroDetails) extends AnyVal {
  }

  @scala.scalajs.js.native trait Friend extends scala.scalajs.js.Object {
    val name: String
  }

  object Friend {
    val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
    implicit class ViewExtensions(private val orig: Friend) extends AnyVal {
    }
  }
  val fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  friends {\\" +
    \\"    name\\" +
    \\"  }\\" +
    \\"}\\"
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with a fragment spread nested in an inline fragment 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ... on Droid {\\" +
    \\"      ...HeroDetails\\" +
    \\"    }\\" +
    \\"  }\\" +
    \\"}\\"

  val requestString: String = { operationString + HeroDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  @scala.scalajs.js.native trait Data extends scala.scalajs.js.Object {
    val hero: com.apollographql.scalajs.OptionalResult[Data.Hero]
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
    implicit class ViewExtensions(private val orig: Data) extends AnyVal {
    }

    @scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
    }

    @scala.scalajs.js.native trait AsDroid extends scala.scalajs.js.Object with Hero with HeroDetails {
      val name: String
    }

    object AsDroid {
      val possibleTypes = scala.collection.Set(\\"Droid\\")
      implicit class ViewExtensions(private val orig: AsDroid) extends AnyVal {
      }
    }

    object Hero {
      val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
      implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
        def asDroid: Option[AsDroid] = {
          if (AsDroid.possibleTypes.contains(orig.asInstanceOf[scala.scalajs.js.Dynamic].__typename.asInstanceOf[String])) Some(orig.asInstanceOf[AsDroid]) else None
        }
      }
    }
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with conditional fragment spreads 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...DroidDetails\\" +
    \\"  }\\" +
    \\"}\\"

  val requestString: String = { operationString + DroidDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  @scala.scalajs.js.native trait Data extends scala.scalajs.js.Object {
    val hero: com.apollographql.scalajs.OptionalResult[Data.Hero]
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
    implicit class ViewExtensions(private val orig: Data) extends AnyVal {
    }

    @scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
    }

    @scala.scalajs.js.native trait AsDroid extends scala.scalajs.js.Object with Hero with DroidDetails {
      val primaryFunction: com.apollographql.scalajs.OptionalResult[String]
    }

    object AsDroid {
      val possibleTypes = scala.collection.Set(\\"Droid\\")
      implicit class ViewExtensions(private val orig: AsDroid) extends AnyVal {
      }
    }

    object Hero {
      val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
      implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
        def asDroid: Option[AsDroid] = {
          if (AsDroid.possibleTypes.contains(orig.asInstanceOf[scala.scalajs.js.Dynamic].__typename.asInstanceOf[String])) Some(orig.asInstanceOf[AsDroid]) else None
        }
        def asDroidDetails: Option[DroidDetails] = {
          if (DroidDetails.possibleTypes.contains(orig.asInstanceOf[scala.scalajs.js.Dynamic].__typename.asInstanceOf[String])) Some(orig.asInstanceOf[DroidDetails]) else None
        }
      }
    }
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with fragment spreads 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...HeroDetails\\" +
    \\"  }\\" +
    \\"}\\"

  val requestString: String = { operationString + HeroDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  @scala.scalajs.js.native trait Data extends scala.scalajs.js.Object {
    val hero: com.apollographql.scalajs.OptionalResult[Data.Hero]
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
    implicit class ViewExtensions(private val orig: Data) extends AnyVal {
    }

    @scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object with HeroDetails {
      val name: String
    }

    object Hero {
      val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
      implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
      }
    }
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() should generate a class declaration for a query with variables 1`] = `
"object HeroNameQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query HeroName($episode: Episode) {\\" +
    \\"  hero(episode: $episode) {\\" +
    \\"    name\\" +
    \\"  }\\" +
    \\"}\\"
  val operation = com.apollographql.scalajs.gql(operationString)


  @scala.scalajs.js.native trait Variables extends scala.scalajs.js.Object {
    val episode: com.apollographql.scalajs.OptionalInput[String]
  }

  object Variables {
    def apply(episode: com.apollographql.scalajs.OptionalInput[String] = com.apollographql.scalajs.OptionalInput.empty) =  {
      scala.scalajs.js.Dynamic.literal(episode = episode).asInstanceOf[Variables]
    }
  }

  @scala.scalajs.js.native trait Data extends scala.scalajs.js.Object {
    val hero: com.apollographql.scalajs.OptionalResult[Data.Hero]
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
    implicit class ViewExtensions(private val orig: Data) extends AnyVal {
    }

    @scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
      val name: String
    }

    object Hero {
      val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
      implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
      }
    }
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() when generateOperationIds is specified should generate a class declaration with an operationId property 1`] = `
"object HeroQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query Hero {\\" +
    \\"  hero {\\" +
    \\"    ...HeroDetails\\" +
    \\"  }\\" +
    \\"}\\"

  val operationIdentifier: String = \\"90d0d674eb6a7b33776f63200d6cec3d09f881247c360a2ac9a29037a02210c4\\"

  val requestString: String = { operationString + HeroDetails.fragmentString }
  val operation = com.apollographql.scalajs.gql(requestString)

  type Variables = Unit

  @scala.scalajs.js.native trait Data extends scala.scalajs.js.Object {
    val hero: com.apollographql.scalajs.OptionalResult[Data.Hero]
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
    implicit class ViewExtensions(private val orig: Data) extends AnyVal {
    }

    @scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object with HeroDetails {
      val name: String
    }

    object Hero {
      val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
      implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
      }
    }
  }
}"
`;

exports[`Scala code generation #classDeclarationForOperation() when generateOperationIds is specified should generate appropriate operation id mapping source when there are nested fragment references 1`] = `
"query Hero {
  hero {
    ...HeroDetails
  }
}
fragment HeroDetails on Character {
  ...HeroName
  appearsIn
}
fragment HeroName on Character {
  name
}"
`;

exports[`Scala code generation #generateSource() should emit a package declaration when the namespace option is specified 1`] = `
"//  This file was automatically generated and should not be edited.


package hello.world

/**
 * The episodes in the Star Wars trilogy
 */
object Episode {
  /**
   * Star Wars Episode IV: A New Hope, released in 1977.
   */
  val newhope = \\"NEWHOPE\\"
  /**
   * Star Wars Episode V: The Empire Strikes Back, released in 1980.
   */
  val empire = \\"EMPIRE\\"
  /**
   * Star Wars Episode VI: Return of the Jedi, released in 1983.
   */
  val jedi = \\"JEDI\\"
}


object HeroNameQuery extends com.apollographql.scalajs.GraphQLQuery {
  val operationString =
    \\"query HeroName($episode: Episode) {\\" +
    \\"  hero(episode: $episode) {\\" +
    \\"    name\\" +
    \\"  }\\" +
    \\"}\\"
  val operation = com.apollographql.scalajs.gql(operationString)


  @scala.scalajs.js.native trait Variables extends scala.scalajs.js.Object {
    val episode: com.apollographql.scalajs.OptionalInput[String]
  }

  object Variables {
    def apply(episode: com.apollographql.scalajs.OptionalInput[String] = com.apollographql.scalajs.OptionalInput.empty) =  {
      scala.scalajs.js.Dynamic.literal(episode = episode).asInstanceOf[Variables]
    }
  }

  @scala.scalajs.js.native trait Data extends scala.scalajs.js.Object {
    val hero: com.apollographql.scalajs.OptionalResult[Data.Hero]
  }

  object Data {
    val possibleTypes = scala.collection.Set(\\"Query\\")
    implicit class ViewExtensions(private val orig: Data) extends AnyVal {
    }

    @scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
      val name: String
    }

    object Hero {
      val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
      implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
      }
    }
  }
}"
`;

exports[`Scala code generation #traitDeclarationForFragment() should generate a trait declaration for a fragment that includes a fragment spread 1`] = `
"@scala.scalajs.js.native trait HeroDetails extends scala.scalajs.js.Object with MoreHeroDetails {
  val name: String
  val appearsIn: scala.scalajs.js.Array[com.apollographql.scalajs.OptionalResult[String]]
}

object HeroDetails {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: HeroDetails) extends AnyVal {
  }
  val fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  ...MoreHeroDetails\\" +
    \\"}\\"
}"
`;

exports[`Scala code generation #traitDeclarationForFragment() should generate a trait declaration for a fragment with a concrete type condition 1`] = `
"@scala.scalajs.js.native trait DroidDetails extends scala.scalajs.js.Object {
  val name: String
  val primaryFunction: com.apollographql.scalajs.OptionalResult[String]
}

object DroidDetails {
  val possibleTypes = scala.collection.Set(\\"Droid\\")
  implicit class ViewExtensions(private val orig: DroidDetails) extends AnyVal {
  }
  val fragmentString =
    \\"fragment DroidDetails on Droid {\\" +
    \\"  name\\" +
    \\"  primaryFunction\\" +
    \\"}\\"
}"
`;

exports[`Scala code generation #traitDeclarationForFragment() should generate a trait declaration for a fragment with a subselection 1`] = `
"@scala.scalajs.js.native trait HeroDetails extends scala.scalajs.js.Object {
  val name: String
  val friends: com.apollographql.scalajs.OptionalResult[scala.scalajs.js.Array[com.apollographql.scalajs.OptionalResult[HeroDetails.Friend]]]
}

object HeroDetails {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: HeroDetails) extends AnyVal {
  }

  @scala.scalajs.js.native trait Friend extends scala.scalajs.js.Object {
    val name: String
  }

  object Friend {
    val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
    implicit class ViewExtensions(private val orig: Friend) extends AnyVal {
    }
  }
  val fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  friends {\\" +
    \\"    name\\" +
    \\"  }\\" +
    \\"}\\"
}"
`;

exports[`Scala code generation #traitDeclarationForFragment() should generate a trait declaration for a fragment with an abstract type condition 1`] = `
"@scala.scalajs.js.native trait HeroDetails extends scala.scalajs.js.Object {
  val name: String
  val appearsIn: scala.scalajs.js.Array[com.apollographql.scalajs.OptionalResult[String]]
}

object HeroDetails {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: HeroDetails) extends AnyVal {
  }
  val fragmentString =
    \\"fragment HeroDetails on Character {\\" +
    \\"  name\\" +
    \\"  appearsIn\\" +
    \\"}\\"
}"
`;

exports[`Scala code generation #traitDeclarationForSelectionSet() should escape reserved keywords in a trait declaration for a selection set 1`] = `
"@scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
  val private: com.apollographql.scalajs.OptionalResult[String]
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
  }
}"
`;

exports[`Scala code generation #traitDeclarationForSelectionSet() should generate a nested trait declaration for a selection set with subselections 1`] = `
"@scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
  val friends: com.apollographql.scalajs.OptionalResult[scala.scalajs.js.Array[com.apollographql.scalajs.OptionalResult[Hero.Friend]]]
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
  }

  @scala.scalajs.js.native trait Friend extends scala.scalajs.js.Object {
    val name: com.apollographql.scalajs.OptionalResult[String]
  }

  object Friend {
    val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
    implicit class ViewExtensions(private val orig: Friend) extends AnyVal {
    }
  }
}"
`;

exports[`Scala code generation #traitDeclarationForSelectionSet() should generate a trait declaration for a fragment spread nested in an inline fragment 1`] = `
"@scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
}

@scala.scalajs.js.native trait AsDroid extends scala.scalajs.js.Object with Hero with HeroDetails {
}

object AsDroid {
  val possibleTypes = scala.collection.Set(\\"Droid\\")
  implicit class ViewExtensions(private val orig: AsDroid) extends AnyVal {
  }
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
    def asDroid: Option[AsDroid] = {
      if (AsDroid.possibleTypes.contains(orig.asInstanceOf[scala.scalajs.js.Dynamic].__typename.asInstanceOf[String])) Some(orig.asInstanceOf[AsDroid]) else None
    }
  }
}"
`;

exports[`Scala code generation #traitDeclarationForSelectionSet() should generate a trait declaration for a selection set 1`] = `
"@scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
  val name: com.apollographql.scalajs.OptionalResult[String]
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
  }
}"
`;

exports[`Scala code generation #traitDeclarationForSelectionSet() should generate a trait declaration for a selection set with a fragment spread that matches the parent type 1`] = `
"@scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object with HeroDetails {
  val name: com.apollographql.scalajs.OptionalResult[String]
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
  }
}"
`;

exports[`Scala code generation #traitDeclarationForSelectionSet() should generate a trait declaration for a selection set with a fragment spread with a more specific type condition 1`] = `
"@scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
  val name: com.apollographql.scalajs.OptionalResult[String]
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
    def asDroidDetails: Option[DroidDetails] = {
      if (DroidDetails.possibleTypes.contains(orig.asInstanceOf[scala.scalajs.js.Dynamic].__typename.asInstanceOf[String])) Some(orig.asInstanceOf[DroidDetails]) else None
    }
  }
}"
`;

exports[`Scala code generation #traitDeclarationForSelectionSet() should generate a trait declaration for a selection set with an inline fragment 1`] = `
"@scala.scalajs.js.native trait Hero extends scala.scalajs.js.Object {
  val name: String
}

@scala.scalajs.js.native trait AsDroid extends scala.scalajs.js.Object with Hero {
  val name: String
  val primaryFunction: com.apollographql.scalajs.OptionalResult[String]
}

object AsDroid {
  val possibleTypes = scala.collection.Set(\\"Droid\\")
  implicit class ViewExtensions(private val orig: AsDroid) extends AnyVal {
  }
}

object Hero {
  val possibleTypes = scala.collection.Set(\\"Human\\", \\"Droid\\")
  implicit class ViewExtensions(private val orig: Hero) extends AnyVal {
    def asDroid: Option[AsDroid] = {
      if (AsDroid.possibleTypes.contains(orig.asInstanceOf[scala.scalajs.js.Dynamic].__typename.asInstanceOf[String])) Some(orig.asInstanceOf[AsDroid]) else None
    }
  }
}"
`;

exports[`Scala code generation #typeDeclarationForGraphQLType() should escape identifiers in cases of enum declaration for a GraphQLEnumType 1`] = `
"object AlbumPrivacies {
  val public = \\"PUBLIC\\"
  val private = \\"PRIVATE\\"
}
"
`;

exports[`Scala code generation #typeDeclarationForGraphQLType() should generate a trait declaration for a GraphQLInputObjectType 1`] = `
"/**
 * The input object sent when someone is creating a new review
 */
@scala.scalajs.js.native trait ReviewInput extends scala.scalajs.js.Object {
  val stars: Int
  val commentary: com.apollographql.scalajs.OptionalInput[String]
  val favoriteColor: com.apollographql.scalajs.OptionalInput[ColorInput]
}

object ReviewInput {
  def apply(stars: Int, commentary: com.apollographql.scalajs.OptionalInput[String] = com.apollographql.scalajs.OptionalInput.empty, favoriteColor: com.apollographql.scalajs.OptionalInput[ColorInput] = com.apollographql.scalajs.OptionalInput.empty) =  {
    scala.scalajs.js.Dynamic.literal(stars = stars, commentary = commentary, favoriteColor = favoriteColor).asInstanceOf[ReviewInput]
  }
}"
`;

exports[`Scala code generation #typeDeclarationForGraphQLType() should generate an enum declaration for a GraphQLEnumType 1`] = `
"/**
 * The episodes in the Star Wars trilogy
 */
object Episode {
  /**
   * Star Wars Episode IV: A New Hope, released in 1977.
   */
  val newhope = \\"NEWHOPE\\"
  /**
   * Star Wars Episode V: The Empire Strikes Back, released in 1980.
   */
  val empire = \\"EMPIRE\\"
  /**
   * Star Wars Episode VI: Return of the Jedi, released in 1983.
   */
  val jedi = \\"JEDI\\"
}
"
`;
