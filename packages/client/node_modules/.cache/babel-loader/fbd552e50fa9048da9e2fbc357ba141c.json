{"ast":null,"code":"import { ApolloLink } from 'apollo-link';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nvar cache = new InMemoryCache();\nvar httpLink = new HttpLink({\n  uri: 'http://localhost:4000/graphql',\n  fetch: fetch,\n  // credentials: 'same-origin',\n  credentials: 'include',\n  headers: {}\n});\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n\n  if (graphQLErrors) {\n    graphQLErrors.map(function (_ref2) {\n      var message = _ref2.message,\n          locations = _ref2.locations,\n          path = _ref2.path;\n      return console.error(\"[GraphQL error]: Message: \".concat(message, \", Location: \") + \"\".concat(locations, \", Path: \").concat(path));\n    });\n  }\n\n  if (networkError) {\n    console.error(\"[Network error]: \".concat(networkError));\n  }\n});\nvar link = ApolloLink.from([errorLink, // requestHandler,\n// stateLink,\nhttpLink]);\nvar client = new ApolloClient({\n  cache: cache,\n  link: link\n}); // (window as any).aaa = cache;\n// client.query({\n//   query: gql-`\n//     query Auth {\n//       hello\n//     }\n//   `,\n// });\n\nexport default client;","map":{"version":3,"sources":["/Users/oleggamega/WebstormProjects/graphql-typescript-boilerplate/packages/client/src/apolloClient.tsx"],"names":["ApolloLink","ApolloClient","InMemoryCache","HttpLink","onError","cache","httpLink","uri","fetch","credentials","headers","errorLink","graphQLErrors","networkError","map","message","locations","path","console","error","link","from","client"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AAEA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAmC,mBAAnC;AAEA,IAAMC,KAAK,GAAG,IAAIH,aAAJ,EAAd;AAEA,IAAMI,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAC5BI,EAAAA,GAAG,EAAE,+BADuB;AAE5BC,EAAAA,KAAK,EAALA,KAF4B;AAG5B;AACAC,EAAAA,WAAW,EAAE,SAJe;AAK5BC,EAAAA,OAAO,EAAE;AALmB,CAAb,CAAjB;AAQA,IAAMC,SAAS,GAAGP,OAAO,CAAC,gBAAqC;AAAA,MAAlCQ,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAC7D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,GAAd,CAAkB;AAAA,UAAGC,OAAH,SAAGA,OAAH;AAAA,UAAYC,SAAZ,SAAYA,SAAZ;AAAA,UAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,aAChBC,OAAO,CAACC,KAAR,CACE,oCAA6BJ,OAA7B,8BAAwDC,SAAxD,qBAA4EC,IAA5E,CADF,CADgB;AAAA,KAAlB;AAKD;;AACD,MAAIJ,YAAJ,EAAkB;AAChBK,IAAAA,OAAO,CAACC,KAAR,4BAAkCN,YAAlC;AACD;AACF,CAXwB,CAAzB;AAaA,IAAMO,IAAI,GAAGpB,UAAU,CAACqB,IAAX,CAAgB,CAC3BV,SAD2B,EAE3B;AACA;AACAL,QAJ2B,CAAhB,CAAb;AAOA,IAAMgB,MAAM,GAAG,IAAIrB,YAAJ,CAAiB;AAAEI,EAAAA,KAAK,EAALA,KAAF;AAASe,EAAAA,IAAI,EAAJA;AAAT,CAAjB,CAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeE,MAAf","sourcesContent":["import { ApolloLink } from 'apollo-link';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError, ErrorLink } from 'apollo-link-error';\n\nconst cache = new InMemoryCache();\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/graphql',\n  fetch,\n  // credentials: 'same-origin',\n  credentials: 'include',\n  headers: {},\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.error(\n        `[GraphQL error]: Message: ${message}, Location: ` + `${locations}, Path: ${path}`\n      )\n    );\n  }\n  if (networkError) {\n    console.error(`[Network error]: ${networkError}`);\n  }\n});\n\nconst link = ApolloLink.from([\n  errorLink,\n  // requestHandler,\n  // stateLink,\n  httpLink,\n]);\n\nconst client = new ApolloClient({ cache, link });\n\n// (window as any).aaa = cache;\n// client.query({\n//   query: gql-`\n//     query Auth {\n//       hello\n//     }\n//   `,\n// });\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}