{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/oleggamega/WebstormProjects/graphql-typescript-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/oleggamega/WebstormProjects/graphql-typescript-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/oleggamega/WebstormProjects/graphql-typescript-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/oleggamega/WebstormProjects/graphql-typescript-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/oleggamega/WebstormProjects/graphql-typescript-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/oleggamega/WebstormProjects/graphql-typescript-boilerplate/packages/client/src/orders/OrderListQuery.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        query OrderListQuery($page: Int!, $perPage: Int!, $filter: OrderFilterInput) {\\n          orderPagination(page: $page, perPage: $perPage, filter: $filter) {\\n            ...OrderListFragment\\n          }\\n        }\\n        \", \"\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport OrderList from './OrderList';\nimport Loading from '../components/Loading';\nimport BrokenPage from '../components/BrokenPage';\n\nvar TypedQuery =\n/*#__PURE__*/\nfunction (_Query) {\n  _inherits(TypedQuery, _Query);\n\n  function TypedQuery() {\n    _classCallCheck(this, TypedQuery);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TypedQuery).apply(this, arguments));\n  }\n\n  return TypedQuery;\n}(Query);\n\nexport default function OrderListQuery(_ref) {\n  var _ref$page = _ref.page,\n      page = _ref$page === void 0 ? 1 : _ref$page,\n      _ref$perPage = _ref.perPage,\n      perPage = _ref$perPage === void 0 ? 20 : _ref$perPage;\n  return React.createElement(TypedQuery, {\n    query: gql(_templateObject(), OrderList.fragment),\n    variables: {\n      page: page,\n      perPage: perPage\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, function (_ref2) {\n    var data = _ref2.data,\n        loading = _ref2.loading,\n        error = _ref2.error;\n    if (error) return React.createElement(BrokenPage, {\n      message: error.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n    if (loading || !data) return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n    return React.createElement(OrderList, {\n      orderPagination: data.orderPagination,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n  });\n}","map":{"version":3,"sources":["/Users/oleggamega/WebstormProjects/graphql-typescript-boilerplate/packages/client/src/orders/OrderListQuery.tsx"],"names":["React","Query","gql","OrderList","Loading","BrokenPage","TypedQuery","OrderListQuery","page","perPage","fragment","data","loading","error","message","orderPagination"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;IAEMC,U;;;;;;;;;;;;EAAmBL,K;;AAOzB,eAAe,SAASM,cAAT,OAAoD;AAAA,uBAA1BC,IAA0B;AAAA,MAA1BA,IAA0B,0BAAnB,CAAmB;AAAA,0BAAhBC,OAAgB;AAAA,MAAhBA,OAAgB,6BAAN,EAAM;AACjE,SACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAEP,GAAF,oBAMDC,SAAS,CAACO,QANT,CADP;AASE,IAAA,SAAS,EAAE;AACTF,MAAAA,IAAI,EAAJA,IADS;AAETC,MAAAA,OAAO,EAAPA;AAFS,KATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcG,iBAA8B;AAAA,QAA3BE,IAA2B,SAA3BA,IAA2B;AAAA,QAArBC,OAAqB,SAArBA,OAAqB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AAC7B,QAAIA,KAAJ,EAAW,OAAO,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACX,QAAIF,OAAO,IAAI,CAACD,IAAhB,EAAsB,OAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEtB,WAAO,oBAAC,SAAD;AAAW,MAAA,eAAe,EAAEA,IAAI,CAACI,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAnBH,CADF;AAuBD","sourcesContent":["import React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport OrderList from './OrderList';\nimport { OrderListQuery as Q, OrderListQueryVariables as V } from './__generated__/OrderListQuery';\nimport Loading from '../components/Loading';\nimport BrokenPage from '../components/BrokenPage';\n\nclass TypedQuery extends Query<Q, V> {}\n\ninterface Props {\n  page: number;\n  perPage: number;\n}\n\nexport default function OrderListQuery({ page = 1, perPage = 20 }) {\n  return (\n    <TypedQuery\n      query={gql`\n        query OrderListQuery($page: Int!, $perPage: Int!, $filter: OrderFilterInput) {\n          orderPagination(page: $page, perPage: $perPage, filter: $filter) {\n            ...OrderListFragment\n          }\n        }\n        ${OrderList.fragment}\n      `}\n      variables={{\n        page,\n        perPage,\n      }}\n    >\n      {({ data, loading, error }) => {\n        if (error) return <BrokenPage message={error.message} />;\n        if (loading || !data) return <Loading />;\n\n        return <OrderList orderPagination={data.orderPagination} />;\n      }}\n    </TypedQuery>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}